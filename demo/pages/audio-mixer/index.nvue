<template>
	<view class="wrap">
		<uni-popup ref="popup" type="message" background-color="#fff">
			<uni-popup-message type="success" :message="text" :duration="1000"></uni-popup-message>
		</uni-popup>
		<uni-popup ref="error" type="message" background-color="#fff">
			<uni-popup-message type="error" :message="error" :duration="1000"></uni-popup-message>
		</uni-popup>
		<view>
			<view class="flex-column">
				<uni-row class="title margin-top-sm margin-bottom-sm" v-if="platform === 'ios'">
					<view class="margin-right-sm">是否开启耳返</view>
					<button size="mini" type="primary" @click="handleSetPlayBack">修改</button>
				</uni-row>
				<uni-data-checkbox v-if="platform === 'ios'" :multiple="false" v-model="playBack"
					:localdata="playBackList">
				</uni-data-checkbox>
				<uni-row class="title margin-top-sm margin-bottom-sm">
					<view class="margin-right-sm">设置本地音量(范围0-1)</view>
				</uni-row>
				<view>
					<slider show-value max="100" step="1" :value="playingVolume" @changing="handleSetPlayingVolume" />
				</view>
				<uni-row class="title margin-top-sm margin-bottom-sm">
					<view class="margin-right-sm">设置混音地址</view>
				</uni-row>
				<uni-easyinput v-model="audioUrl" placeholder="请输入混音地址"></uni-easyinput>
				<uni-row class="title margin-top-sm margin-bottom-sm">
					<view class="margin-right-sm">设置混音音量(范围0-1)</view>
				</uni-row>
				<view>
					<slider show-value max="100" step="1" :value="microphoneVolume" @changing="handleSetMicrophone" />
				</view>
				<uni-row class="title margin-top-sm margin-bottom-sm">
					<view class="margin-right-sm">设置音乐音量(范围0-1)</view>
				</uni-row>
				<view>
					<slider show-value max="100" step="1" :value="musicVolume" @changing="handleSetMusic" />
				</view>
				<view class="title margin-top-sm margin-bottom-sm">视频总时长： {{duration}}秒，当前进度：{{currentPosition}}秒</view>
				<slider block-size="16" show-value="false" :value="currentTime" @changing="handleSliderChanging"
					@change="handleSliderChange" :max="duration" step="1" />
			</view>
			<view class="flex-row">
				<button style="flex:1;margin-right:10upx" type="primary" @click="handleCreateAudioMixer">创建混音</button>
				<button style="flex:1;margin-left:10upx" type="primary" @click="handleStartAudioMixer">开启混音</button>
			</view>
			<view class="margin-top-sm flex-row">
				<button type="warn" @click="handleStoptAudioMixer">停止混音</button>
				<button type="primary" @click="handleResumeAudioMixer">恢复混音</button>
				<button type="warn" @click="handlePauseAudioMixer">暂停混音</button>
			</view>
		</view>
	</view>
</template>

<script>
	import { QNRTC } from "@/js_sdk/QNRTC-UniPlugin-JS/QNRTC-UniPlugin-JS/RTCIndex.native.js"
	import {
		mapState
	} from "vuex"
	export default {
		computed: {
			...mapState(["platform", "token", "policy", "logLevel", "stereo", "bwePolicy", "allowAudioMixWithOthers",
				"hWCodecEnabled", "maintainResolution", "fieldTrials", "encoderQualityMode", "isAEC3Enabled"
			])
		},
		data() {
			return {
				// track 参数
				remoteAudioTracks: {},
				microphoneAudioTrack: {},
				client: null,
				currentTime: 0,
				audioMixer: null,
				playBack: 0,
				audioUrl: "https://docs.qnsdk.com/eva_edm.mp3",
				localAudioUrl: "",
				playingVolume: 100,
				microphoneVolume: 100,
				musicVolume: 100,
				duration: 0,
				currentPosition: 0,
				timer: null,
				text: "创建成功",
				error: "",
				playBackList: [{
						text: "是",
						value: 1
					},
					{
						text: "否",
						value: 0
					}
				]
			}
		},
		onBackPress() {
			this.client.leave()
			QNRTC.deinit()
		},
		onUnload() {
			this.client.leave()
			QNRTC.deinit()
		},
		onLoad() {
			this.handleJoinRoom()
		},
		methods: {
			handleDownLoad(callback) {
				this.localAudioUrl = ""
				uni.downloadFile({
					url: this.audioUrl,
					success: (res) => {
						if (res.statusCode === 200) {
							uni.saveFile({
								tempFilePath: res.tempFilePath,
								success: (res) => {
									this.localAudioUrl = res.savedFilePath
									callback()
									console.log(res.savedFilePath)
								}
							})
						}
					}
				});
			},
			// 开始混音
			handleStartAudioMixer() {
				this.audioMixer.start()
			},
			// 停止混音
			handleStoptAudioMixer() {
				this.audioMixer.stop()
			},
			// 恢复混音
			handleResumeAudioMixer() {
				this.audioMixer.resume()
			},
			// 暂停混音
			handlePauseAudioMixer() {
				this.audioMixer.pause()
			},
			// 修改耳返
			handleSetPlayBack() {
				this.audioMixer.setPlayBack(this.playBack === 1)
				this.$refs.popup.open()
			},
			// 创建混音
			handleCreateAudioMixer() {
				this.audioMixer = this.microphoneAudioTrack.createAudioMixer(this.audioUrl)
				this.audioMixer.on("onStateChanged", (params) => {
					this.text = params.state
					if (params.state === "MIXING") {
						this.duration = ~~this.audioMixer.getDuration() / 1000000
					}
					this.$refs.popup.open()
				})
				this.audioMixer.on("onMixing", (params) => {
					console.log(params)
					this.currentPosition = ~~(params.currentTimeUs / 1000000)
					this.currentTime = ~~(params.currentTimeUs / 1000000)
				})
				this.audioMixer.on("onError", (params) => {
					this.error = `错误信息：${params.message},错误码：${params.code}`
				})
				this.$refs.popup.open()
			},
			// 修改本地音量
			handleSetPlayingVolume(event) {
				this.playingVolume = event.detail.value
				this.audioMixer.setPlayingVolume(this.playingVolume / 100)
			},
			// 修改混音麦克风音量
			handleSetMicrophone(event) {
				this.microphoneVolume = event.detail.value
				this.audioMixer.setMixingVolume(this.microphoneVolume / 100, this.musicVolume / 100)
			},
			// 修改混音音乐音量
			handleSetMusic(event) {
				this.musicVolume = event.detail.value
				this.audioMixer.setMixingVolume(this.microphoneVolume / 100, this.musicVolume / 100)
			},
			// 拖动进度
			handleSliderChanging(event) {
				this.audioMixer.pause()
			},
			handleSliderChange(event) {
				this.audioMixer.seekTo(event.detail.value * 1000000)
				this.audioMixer.resume()
			},
			async handleJoinRoom() {
				QNRTC.configRTC({
					policy: this.policy,
					logLevel: this.logLevel,
					stereo: this.stereo === 1,
					bwePolicy: this.bwePolicy,
					allowAudioMixWithOthers: this.allowAudioMixWithOthers === 1,
					hWCodecEnabled: this.hWCodecEnabled === 1,
					maintainResolution: this.maintainResolution === 1,
					fieldTrials: this.fieldTrials,
					encoderQualityMode: this.encoderQualityMode === 1,
					isAEC3Enabled: this.isAEC3Enabled === 1
				})
				this.client = QNRTC.createClient()
				this.microphoneAudioTrack = QNRTC.createMicrophoneAudioTrack()
				this.client.on("onConnectionStateChanged", ({
					state,
					info
				}) => {
					if (state === "CONNECTED") {
						this.client.publish([this.microphoneAudioTrack], (onPublished, error) => {
							if (onPublished) {
								uni.showModal({
									content: "发布成功"
								})
							} else {
								uni.showModal({
									content: error.message
								})
							}
						})
					} else if (state === "DISCONNECTED") {
						if (info.reason === "KICKED_OUT") {
							uni.showModal({
								content: "被踢出房间",
								success: (res) => {
									uni.navigateBack()
								}
							})
						} else if (info.reason === "ROOM_CLOSED") {
							uni.showModal({
								content: "房间被关闭",
								success: (res) => {
									uni.navigateBack()
								}
							})
						} else if (info.reason === "ROOM_FULL") {
							uni.showModal({
								content: "房间人数已满",
								success: (res) => {
									uni.navigateBack()
								}
							})
						}
					} else if (state === "RECONNECTING") {
						uni.showLoading({
							mask: true,
							title: '重连中'
						})
					} else if (state === "RECONNECTED") {
						uni.hideLoading()
						uni.showModal({
							content: "重连成功"
						})
					}
				})
				this.client.on("onAudioSubscribed", (params) => {
					for (let i of params.trackList) {
						this.remoteAudioTracks = i
					}
				})
				this.client.on("onUserUnpublished", (params) => {
					for (let i of params.trackList) {
						if (i.trackID === this.remoteAudioTracks.trackID) {
							this.remoteAudioTracks = {}
						}
					}
				})
				this.client.join(this.token)
			}
		}
	}
</script>
<style>
	.wrap {
		border-radius: 5px;
		margin: 0 20px 20px;
		padding: 10px 0;
	}

	.local {
		width: 750upx;
		flex: 0.5
	}

	.local2 {
		width: 750upx;
		flex: 1;
	}

	.remote {
		width: 750upx;
		flex: 0.5
	}
</style>
