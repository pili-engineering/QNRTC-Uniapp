<template>
	<view>
		<uni-popup ref="success" type="message" background-color="#fff">
			<uni-popup-message type="success" :message="successMessage" :duration="1000"></uni-popup-message>
		</uni-popup>
		<uni-popup ref="error" type="message" background-color="#fff">
			<uni-popup-message type="error" :message="errorMessage" :duration="1000"></uni-popup-message>
		</uni-popup>
		<view class="wrap">
			<u--input v-model="CDNConfig.streamID" placeholder="请输入streamID"></u--input>
			<u--input class="margin-top-sm" v-model="CDNConfig.url" placeholder="请输入内容"></u--input>
			<u--input class="margin-top-sm" readonly :value="CDNConfig.videoTracks" placeholder="视频轨"></u--input>
			<u--input class="margin-top-sm" readonly :value="CDNConfig.audioTracks" placeholder="音频轨"></u--input>
			<u-picker :show="videoTrackShow" :columns="allPcVideoTrack" keyName="trackID" closeOnClickOverlay
				@cancel="videoTrackShow=false" @close="videoTrackShow=false"
				@confirm="handleConfirmVideoTrack($event)"></u-picker>
			<u-picker :show="audioTrackShow" :columns="allPcAudioTrack" keyName="trackID" closeOnClickOverlay
				@cancel="audioTrackShow=false" @close="audioTrackShow=false"
				@confirm="handleConfirmAudioTrack($event)"></u-picker>
			<u-button class="margin-top-sm" @click="videoTrackShow = true" text="选择视频轨" plain type="primary"></u-button>
			<u-button class="margin-top-sm" @click="audioTrackShow = true" text="选择音频轨" plain type="primary"></u-button>
			<view class="margin-top-sm">
				<u-button type="primary" @click="handleStartLiveStreamingWithDirect" text="开始推流"></u-button>
			</view>
			<view class="margin-top-sm">
				<u-button type="error" @click="handleStopLiveStreamingWithDirect" text="停止推流"></u-button>
			</view>
		</view>
		<view class="track-wrap">
			<div class="track-item-wrap" v-for="(item,index) in localTracks" :key="index" v-if="item.kind === 'video'">
				<QNRTC-UniPlugin-SurfaceView class="track-video" :local="0" :identifyID="item.identifyID"
					:trackID="item.trackID"></QNRTC-UniPlugin-SurfaceView>
				<view class="track-info-wrap">
					<text class="track-info-item">{{item.trackID}}</text>
				</view>
			</div>
			<div class="track-item-wrap" v-for="(item,index) in remoteTracks" :key="item.trackID"
				v-if="item.kind === 'video'">
				<QNRTC-UniPlugin-SurfaceView class="track-video" :local="1" :identifyID="item.identifyID"
					:userID="item.userID" :trackID="item.trackID">
				</QNRTC-UniPlugin-SurfaceView>
				<view class="track-info-wrap">
					<text class="track-info-item">{{item.trackID}}</text>
				</view>
			</div>
		</view>
	</view>
</template>

<script>
	import {
		QNRTC,
		QNRTCLogLevel
	} from "@/js_sdk/QNRTC-UniPlugin-JS/QNRTC-UniPlugin-JS/RTCIndex.native.js"

	import {
		mapState
	} from "vuex"
	export default {
		data() {
			return {
				successMessage: "",
				errorMessage: "",
				videoTrackShow: false,
				audioTrackShow: false,
				remoteTracks: [],
				localTracks: [],
				client: null,
				CDNConfig: {
					streamID: "test",
					url: "rtmp://pili-publish.qnsdk.com/sdk-live/sdk-direct-livestreaming-demo",
					audioTracks: "",
					videoTracks: ""
				}
			}
		},
		onBackPress() {
			this.client.leave()
			QNRTC.deinit()
		},
		onUnload() {
			this.client.leave()
			QNRTC.deinit()
		},
		onLoad() {
			this.handleJoinRoom()
		},
		computed: {
			...mapState(["captureHeight", "captureWidth", "encodeWidth", "encodeHeight", "platform", "multiStreamEnable",
				"token", "policy", "logLevel", "stereo", "bwePolicy", "allowAudioMixWithOthers", "hWCodecEnabled",
				"maintainResolution", "fieldTrials", "encoderQualityMode", "isAEC3Enabled"
			]),
			allPcVideoTrack() {
				const video = []
				console.log(this.localTracks)
				console.log(this.remoteTracks)
				for (let i of this.localTracks) {
					if (i.kind === "video") {
						video.push(i)
					}
				}
				for (let i of this.remoteTracks) {
					if (i.kind === "video") {
						video.push(i)
					}
				}
				return [video]
			},
			allPcAudioTrack() {
				const audio = []
				console.log(this.localTracks)
				console.log(this.remoteTracks)
				for (let i of this.localTracks) {
					if (i.kind === "audio") {
						audio.push(i)
					}
				}
				for (let i of this.remoteTracks) {
					if (i.kind === "audio") {
						audio.push(i)
					}
				}
				return [audio]
			}
		},
		methods: {
			handleStartLiveStreamingWithDirect() {
				console.log(this.CDNConfig)
				this.client.startLiveStreamingWithDirect(this.CDNConfig)
			},
			handleStopLiveStreamingWithDirect() {
				this.client.stopLiveStreamingWithDirect(this.CDNConfig)
			},
			handleConfirmVideoTrack(event) {
				this.$set(this.CDNConfig, "videoTracks", event.value[0].trackID)
				this.videoTrackShow = false
			},
			handleConfirmAudioTrack(event) {
				this.$set(this.CDNConfig, "audioTracks", event.value[0].trackID)
				this.audioTrackShow = false
			},
			async handleJoinRoom() {
				QNRTC.configRTC({
					policy: this.policy,
					logLevel: this.logLevel,
					stereo: this.stereo === 1,
					bwePolicy: this.bwePolicy,
					allowAudioMixWithOthers: this.allowAudioMixWithOthers === 1,
					hWCodecEnabled: this.hWCodecEnabled === 1,
					maintainResolution: this.maintainResolution === 1,
					fieldTrials: this.fieldTrials,
					encoderQualityMode: this.encoderQualityMode === 1,
					isAEC3Enabled: this.isAEC3Enabled === 1
				})
				this.client = QNRTC.createClient()
				const cameraVideoTrack = QNRTC.createCameraVideoTrack({
					multiStreamEnable: this.multiStreamEnable === 1,
					width: this.encodeWidth * 1,
					height: this.encodeHeight * 1,
					captureHeight: this.captureHeight * 1,
					captureWidth: this.captureWidth * 1
				})
				this.localTracks.push(cameraVideoTrack)
				const microphoneAudioTrack = QNRTC.createMicrophoneAudioTrack()
				this.localTracks.push(microphoneAudioTrack)
				this.client.on("onConnectionStateChanged", ({
					state
				}) => {
					if (state === "CONNECTED") {
						this.client.publish(this.localTracks, (onPublished, error) => {
							if (onPublished) {
								this.successMessage = "发布成功"
								this.$refs.success.open()
							} else {
								this.errorMessage = error.message
								this.$refs.error.open()
							}
						})
					} else if (state === "DISCONNECTED") {
						if (info.reason === "KICKED_OUT") {
							uni.showModal({
								content: '被踢出房间',
								success: (res) => {
									uni.navigateBack()
								},
							})
						} else if (info.reason === "ROOM_CLOSED") {
							uni.showModal({
								content: "房间被关闭",
								success: (res) => {
									uni.navigateBack()
								}
							})
						} else if (info.reason === "ROOM_FULL") {
							uni.showModal({
								content: "房间人数已满",
								success: (res) => {
									uni.navigateBack()
								}
							})
						}
					} else if (state === "RECONNECTING") {
						uni.showLoading({
							mask: true,
							title: '重连中'
						})
					} else if (state === "RECONNECTED") {
						uni.hideLoading()
						this.successMessage = "重连成功"
						this.$refs.success.open()
					}
				})
				this.client.on("onVideoSubscribed", (params) => {
					for (let i of params.trackList) {
						this.remoteTracks.push(i)
					}
				})
				this.client.on("onAudioSubscribed", (params) => {
					for (let i of params.trackList) {
						this.remoteTracks.push(i)
					}
				})
				this.client.on("onUserUnpublished", (params) => {
					console.log("用户取消发布", params)
					for (let i of params.trackList) {
						const index = this.remoteTracks.findIndex(item => item.trackID === i.trackID)
						if (index >= 0) {
							this.remoteTracks.splice(index, 1)
						}
					}
				})
				this.client.on("onStartLiveStreaming", (params) => {
					this.successMessage = `转推任务${params.streamID}创建成功`
					this.$refs.success.open()
				})
				this.client.on("onStoppedLiveStreaming", (params) => {
					this.successMessage = `转推任务${params.streamID}已停止`
					this.$refs.success.open()
				})
				this.client.on("onErrorLiveStreaming", (params) => {
					this.errorMessage = `转推任务${params.streamID}${params.info.message}`
					this.$refs.error.open()
				})
				this.client.join(this.token)
			}
		}
	}
</script>

<style>
	.wrap {
		border-radius: 5px;
		margin: 0 20px 20px;
		padding: 10px 0;
	}

	.track-wrap {
		margin: 0 30upx;
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		justify-content: space-between;
	}

	.track-item-wrap {
		height: 375upx;
		width: 335upx;
		margin-bottom: 20upx;
	}

	.track-video {
		height: 375upx;
		width: 335upx;
	}
</style>