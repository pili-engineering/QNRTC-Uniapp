<template>
	<view>
		<view class="wrap">
			<view class="title">设置项：</view>
			<uni-easyinput class="margin-top-sm" v-model="CDNConfig.streamID" placeholder="请输入streamID"></uni-easyinput>
			<uni-easyinput class="margin-top-sm" v-model="CDNConfig.url" placeholder="请输入内容"></uni-easyinput>
			<uni-data-picker class="margin-top-sm" placeholder="请选择videoTrack" :map="{text:'trackID',value:'trackID'}"
				:localdata="allPcVideoTrack" popup-title="请选择videoTrack" v-model="CDNConfig.videoTracks">
			</uni-data-picker>
			<uni-data-picker class="margin-top-sm" placeholder="请选择audioTrack" :map="{text:'trackID',value:'trackID'}"
				:localdata="allPcAudioTrack" popup-title="请选择audioTrack" v-model="CDNConfig.audioTracks">
			</uni-data-picker>
			<view class="margin-top-sm">
				<button type="primary" @click="handleStart">开始推流</button>
			</view>
			<view class="margin-top-sm">
				<button type="warn" @click="handleEnd">停止推流</button>
			</view>
		</view>
		<view class="margin-top:20px;">
			<div class="track-item-wrap" v-for="(item,index) in localTracks" :key="index">
				<QNRTC-UniPlugin-SurfaceView class="track-video" v-if="item.kind === 'video'" :local="0"
					:identifyID="item.identifyID" :trackID="item.trackID"></QNRTC-UniPlugin-SurfaceView>
				<view class="track-info-wrap">
					<text class="track-info-item">轨道ID：{{item.trackID}}</text>
					<text class="track-info-item">用户ID：自己</text>
					<text class="track-info-item">类型：{{item.kind}}</text>
				</view>
			</div>
			<div class="track-item-wrap" v-for="(item,index) in remoteTracks" :key="item.trackID">
				<QNRTC-UniPlugin-SurfaceView class="track-video" v-if="item.kind === 'video'" :local="1"
					:identifyID="item.identifyID" :userID="item.userID" :trackID="item.trackID">
				</QNRTC-UniPlugin-SurfaceView>
				<view class="track-info-wrap">
					<text class="track-info-item">轨道ID：{{item.trackID}}</text>
					<text class="track-info-item">用户ID：{{item.userID}}</text>
					<text class="track-info-item">类型：{{item.kind}}</text>
				</view>
			</div>
		</view>
	</view>
</template>

<script>
	import QNRTC, {
		QNRTCLogLevel
	} from "@/js_sdk/QNRTC-UniPlugin-JS/QNRTC-UniPlugin-JS/RTCIndex.native.js"

	import {
		mapState
	} from "vuex"
	export default {
		data() {
			return {
				// 所有已订阅的轨
				remoteTracks: [],
				// 本地轨
				localTracks: [],
				client: null,
				CDNConfig: {
					streamID: "test",
					url: "rtmp://pili-publish.qnsdk.com/sdk-live/sdk-direct-livestreaming-demo",
					audioTracks: "",
					videoTracks: ""
				}
			}
		},
		onBackPress() {
			this.client.leave()
			QNRTC.deinit()
		},
		onUnload() {
			this.client.leave()
			QNRTC.deinit()
		},
		onLoad() {
			this.handleJoinRoom()
		},
		computed: {
			...mapState(["captureHeight", "captureWidth", "encodeWidth", "encodeHeight", "platform", "multiStreamEnable",
				"token", "policy", "logLevel", "stereo", "bwePolicy", "allowAudioMixWithOthers", "hWCodecEnabled",
				"maintainResolution", "fieldTrials", "encoderQualityMode", "isAEC3Enabled"
			]),
			allPcVideoTrack() {
				const video = []
				console.log(this.localTracks)
				console.log(this.remoteTracks)
				for (let i of this.localTracks) {
					if (i.kind === "video") {
						video.push(i)
					}
				}
				for (let i of this.remoteTracks) {
					if (i.kind === "video") {
						video.push(i)
					}
				}
				return video
			},
			allPcAudioTrack() {
				const audio = []
				console.log(this.localTracks)
				console.log(this.remoteTracks)
				for (let i of this.localTracks) {
					if (i.kind === "audio") {
						audio.push(i)
					}
				}
				for (let i of this.remoteTracks) {
					if (i.kind === "audio") {
						audio.push(i)
					}
				}
				return audio
			}
		},
		methods: {
			handleStart() {
				this.client.startLiveStreamingWithDirect(this.CDNConfig)
			},
			handleEnd() {
				this.client.stopLiveStreamingWithDirect(this.CDNConfig)
			},
			async handleJoinRoom() {
				QNRTC.configRTC({
					policy: this.policy,
					logLevel: this.logLevel,
					stereo: this.stereo === 1,
					bwePolicy: this.bwePolicy,
					allowAudioMixWithOthers: this.allowAudioMixWithOthers === 1,
					hWCodecEnabled: this.hWCodecEnabled === 1,
					maintainResolution: this.maintainResolution === 1,
					fieldTrials: this.fieldTrials,
					encoderQualityMode: this.encoderQualityMode === 1,
					isAEC3Enabled: this.isAEC3Enabled === 1
				})
				this.client = QNRTC.createClient()
				const cameraVideoTrack = QNRTC.createCameraVideoTrack({
					multiStreamEnable: this.multiStreamEnable === 1,
					width: this.encodeWidth * 1,
					height: this.encodeHeight * 1,
					captureHeight: this.captureHeight * 1,
					captureWidth: this.captureWidth * 1
				})
				this.localTracks.push(cameraVideoTrack)
				const microphoneAudioTrack = QNRTC.createMicrophoneAudioTrack()
				this.localTracks.push(microphoneAudioTrack)
				this.client.on("onConnectionStateChanged", ({
					state
				}) => {
					if (state === "CONNECTED") {
						this.client.publish(this.localTracks, (onPublished, error) => {
							if (onPublished) {
								uni.showModal({
									content: "发布成功"
								})
							} else {
								uni.showModal({
									content: error.message
								})
							}
						})
					} else if (state === "DISCONNECTED") {
						if (info.reason === "KICKED_OUT") {
							uni.showModal({
								content: "被踢出房间",
								success: (res) => {
									uni.navigateBack()
								}
							})
						} else if (info.reason === "ROOM_CLOSED") {
							uni.showModal({
								content: "房间被关闭",
								success: (res) => {
									uni.navigateBack()
								}
							})
						} else if (info.reason === "ROOM_FULL") {
							uni.showModal({
								content: "房间人数已满",
								success: (res) => {
									uni.navigateBack()
								}
							})
						}
					} else if (state === "RECONNECTING") {
						uni.showLoading({
							mask: true,
							title: '重连中'
						})
					} else if (state === "RECONNECTED") {
						uni.hideLoading()
						uni.showModal({
							content: "重连成功"
						})
					}
				})
				this.client.on("onVideoSubscribed", (params) => {
					for (let i of params.trackList) {
						this.remoteTracks.push(i)
					}
				})
				this.client.on("onAudioSubscribed", (params) => {
					for (let i of params.trackList) {
						this.remoteTracks.push(i)
					}
				})
				this.client.on("onUserUnpublished", (params) => {
					console.log("用户取消发布", params)
					for (let i of params.trackList) {
						const index = this.remoteTracks.findIndex(item => item.trackID === i.trackID)
						if (index >= 0) {
							this.remoteTracks.splice(index, 1)
						}
					}
				})
				this.client.on("onStartLiveStreaming", (params) => {
					uni.showModal({
						content: `转推任务${params.streamID}创建成功`
					})
				})
				this.client.on("onStoppedLiveStreaming", (params) => {
					uni.showModal({
						content: `转推任务${params.streamID}已停止`
					})
				})
				this.client.on("onErrorLiveStreaming", (params) => {
					uni.showModal({
						content: `转推任务${params.streamID}${params.info.message}`
					})
				})
				this.client.join(this.token)
			}
		}
	}
</script>

<style>
	.wrap {
		border-radius: 5px;
		margin: 0 20px 20px;
		padding: 10px 0;
	}

	.title {
		font-size: 28upx;
		font-weight: bold;
	}

	.flex {
		display: flex;
		flex-direction: row;
		justify-content: flex-start;
		align-items: center;
	}


	.track-item-wrap {
		position: relative;
		height: 300px;
		display: flex;
		flex-direction: row;
		justify-content: flex-start;
		background-color: black;
	}
</style>
