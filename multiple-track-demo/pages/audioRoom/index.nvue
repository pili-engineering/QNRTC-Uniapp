<template>
	<view class="native-wrap" :style="{height: `${screenHeight * 2}upx`}">
			<view class="audio-wrap">
					<view class="audio-item" v-for="(item, index) in remoteUserList" :key="index">
						<text class="audio-text" v-if="!item.videoTrack || item.videoMute">{{item.userID}}</text>
						<QNRTC-UniPlugin-SurfaceView v-if="item.videoTrack && !item.videoMute" fillMode="QNVideoFillModeNone" :local="1"  :identifyID="item.videoTrack.identifyID" :userID="item.videoTrack.userID"
							:trackID="item.videoTrack.trackID" class="audio-native"></QNRTC-UniPlugin-SurfaceView>
						<view class="audio-volume" v-if="item.volume >= 0.1" :style="{height: `${item.mute ? 0 : Math.min(item.volume * 420 , 210)}upx`}"></view>
					</view>
			</view>
			<view class="control-wrap">
				<view class="control-normal"><uni-icons type="color" size="30" style="color:grey"></uni-icons></view>
				<view class="control-normal" @click="handleChangeMic"><uni-icons :type="onMic ? 'mic' : 'micoff'" size="30" style="color:white"></uni-icons></view>
				<view class="control-item" @click="handleRouteBack"><uni-icons type="phone-filled" size="25" style="color:white"></uni-icons></view>
				<view class="control-normal"><uni-icons type="videocam" size="30" style="color:grey"></uni-icons></view>
				<view><uni-icons type="camera" size="30"  style="color:grey"></uni-icons></view>
			</view>
	</view>
</template>


<script>
	import QNRTC from "@/js_sdk/QNRTC-UniPlugin-JS/QNRTC-UniPlugin-JS/RTCIndex.native.js"
	import {
		mapState,
		mapActions
	} from "vuex"
	export default {
		data() {
			return {
				client: null,
				microphoneAudioTrack: {},
				remoteAudioTracks: [],
				useToken: 0,
				onMic: true,
				remoteUserList: []
			}
		},
		computed:{
			...mapState(["token","screenHeight"]),
			localView() {
				if(this.remoteVideoTracks.length === 0) {
					setTimeout(() => {
						this.$refs.local.reset();
					},100)
					return {height: `${this.screenHeight * 2}upx`,width: "750upx"}
				}else if(this.remoteVideoTracks.length <= 2){
					return {height: `${this.screenHeight}upx`,width: "750upx"}
				}else {
					return {height: `${this.screenHeight}upx`,width: "375upx"}
				}
			},
			remotetView() {
				if(this.remoteVideoTracks.length === 1) {
					return {height: `${this.screenHeight}upx`,width: "750upx"}
				}else if(this.remoteVideoTracks.length <= 3){
					return {height: `${this.screenHeight}upx`,width: "375upx"}
				}
			}
		},
		onUnload() {
			this.handleClearStatus()
		},
		onBackPress() {
			this.handleClearStatus()
		},
		onLoad(option) {
			this.useToken = option.useToken * 1
			this.handleJoinRoom()
		},
		methods: {
			...mapActions(["initToken"]),
			async handleJoinRoom() {
				uni.showLoading({
					mask:true,
					title: '连接中'
				})
				if(!this.useToken) {
					await this.initToken()
				}
				QNRTC.configRTC()
				this.client = QNRTC.createClient()
				const client = QNRTC.createClient()
				this.microphoneAudioTrack = QNRTC.createMicrophoneAudioTrack()
				this.client.on("onConnectionStateChanged", ({
					state,
					info
				}) => {
					if (state === "CONNECTED") {
						this.client.publish([this.microphoneAudioTrack], (onPublished,
							error) => {
							if (onPublished) {
								uni.hideLoading()
								uni.showModal({
									content: "发布成功"
								})
							} else {
								uni.showModal({
									content: error.message
								})
							}
						})
					}else if(state === "DISCONNECTED") {
						if(info.reason === "KICKED_OUT") {
							uni.showModal({
								content: "被踢出房间",
								success: (res) => {
									uni.navigateBack()
								}
							})
						}else if(info.reason === "ROOM_CLOSED") {
							uni.showModal({
								content: "房间被关闭",
								success: (res) => {
									uni.navigateBack()
								}
							})
						}else if(info.reason === "ROOM_FULL") {
							uni.showModal({
								content: "房间人数已满",
								success: (res) => {
									uni.navigateBack()
								}
							})
						}
					}else if(state === "RECONNECTING") {
						uni.showLoading({
							mask:true,
							title: '重连中'
						})
					}else if(state === "RECONNECTED") {
						uni.hideLoading()
						uni.showModal({
							content: "重连成功"
						})
					}
				})
				client.on("onAudioSubscribed", (params) => {
					const index = this.remoteUserList.findIndex(item => item.userID === params.remoteUserID)
					if(index >= 0) {
						this.$set(this.remoteUserList[index], "mute", params.trackList[0].getMuted())
						this.$set(this.remoteUserList[index], "volume", params.trackList[0].getRemoteVolume())
						this.$set(this.remoteUserList[index], "audioTrack", params.trackList[0])
						const timer = setInterval(() => {							
							const index = this.remoteUserList.findIndex(item => item.userID === params.remoteUserID)
							if(index >= 0) {
								this.$set(this.remoteUserList[index], "mute", params.trackList[0].getMuted())
								this.$set(this.remoteUserList[index], "volume", params.trackList[0].getRemoteVolume())
							}
						},200)
						this.$set(this.remoteUserList[index], "timer", timer)
					}
				})
				client.on("onVideoSubscribed", (params) => {
					const index = this.remoteUserList.findIndex(item => item.userID === params.remoteUserID)
					if(index >= 0) {
						this.$set(this.remoteUserList[index], "videoTrack", params.trackList[0])
						this.$set(this.remoteUserList[index], "videoMute", params.trackList[0].getMuted())
						params.trackList[0].on("onMuteStateChanged", (res) => {
							this.$set(this.remoteUserList[index], "videoMute", res.isMuted)
						})
					}
				})
				client.on("onUserUnpublished", (params) => {
					for (let i of params.trackList) {
						if(i.kind === "audio") {
							const index = this.remoteUserList.findIndex(item => item.userID === params.remoteUserID)
							if (index >= 0) {
								this.$set(this.remoteUserList[index], "audioTrack", null)
								this.$set(this.remoteUserList[index], "mute", true)
								clearInterval(this.remoteUserList[index].timer)
							}
						}else if(i.kind === "video" ) {
							const index = this.remoteUserList.findIndex(item => item.userID === params.remoteUserID)
							if (index >= 0) {
								this.$set(this.remoteUserList[index], "videoTrack", null)
							}
						}
					}
				})
				client.on("onUserJoined", (res) => {
					this.remoteUserList.push({
						userID: res.remoteUserID,
						audioTrack: null,
						videoTrack: null,
						mute: true,
						videoMute: false,
						volume: 0,
						timer: null
					})
				})
				client.on("onUserLeft", (res) => {
					const index = this.remoteUserList.findIndex(item => item.userID === res.remoteUserID)
					clearInterval(this.remoteUserList[index].timer)
					this.remoteUserList.splice(index, 1)
				})
				const result = this.client.join(this.token)
			},
			handleClearStatus() {
				this.client.leave()
				QNRTC.deinit()
				this.timer = null
			},
			handleRouteBack() {
				uni.navigateBack()
			},
			handleChangeMic() {
				if(this.onMic) {
					this.microphoneAudioTrack.setMuted(true)
					this.onMic = false
				}else {
					this.microphoneAudioTrack.setMuted(false)
					this.onMic = true
				}
			},
		}
	}
</script>

<style>
	.native-wrap {
		flex-direction: row;
		width: 750upx;
		flex-wrap: wrap;
		background-color: #212121;
	}
	
	.control-wrap{
		position: fixed;
		left: 0;
		bottom: 60upx;
		height: 100upx;
		width: 750upx;
		display: flex;
		justify-content: space-between;
		flex-direction: row;
		align-items: center;
		padding-left: 100upx;
		padding-right: 100upx;
	}
	
	.control-item{
		background:#ef5350;
		border-radius: 50%;
		height: 100upx;
		width: 100upx;
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: center;
	}
		
	.control-image{
		height: 40upx;
		width: 40upx
	}

	.audio-wrap {
		padding-top: 80upx;
		padding-left: 30upx;
		width: 750upx;
		display:flex;
		flex-direction: row;
		flex-wrap: wrap;
	}
	
	.audio-item {
		background:rgba(0,0,0,0.4);
		width: 210upx;
		height: 210upx;
		margin-bottom: 30upx;
		margin-right: 30upx;
		color: #ffffff;
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: center;
		overflow: hidden;
		padding-left: 20upx;
		padding-right: 20upx;
		position: relative;
		border-radius: 20upx
	}
	.audio-native {
		width: 210upx;
		height: 210upx;
	}
	
	.audio-text {
		width: 170upx;
		lines: 1;
		text-overflow: ellipsis;
		overflow: hidden;
		text-align: center;
		color: #ffffff;
	}
	
	.audio-volume {
		position: absolute;
		bottom: 0upx;
		right: 0upx;
		height: 20upx;
		width: 7upx;
		background-color:#42b983
	}

</style>